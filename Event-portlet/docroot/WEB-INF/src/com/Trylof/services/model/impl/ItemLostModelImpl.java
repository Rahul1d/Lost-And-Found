/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.Trylof.services.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.Trylof.services.model.ItemLost;
import com.Trylof.services.model.ItemLostBlobDataBlobModel;
import com.Trylof.services.model.ItemLostModel;
import com.Trylof.services.model.ItemLostSoap;
import com.Trylof.services.service.ItemLostLocalServiceUtil;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ItemLost service. Represents a row in the &quot;LofService_ItemLost&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ItemLostModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ItemLostImpl}.
 * </p>
 *
 * @author Utkarsh
 * @see ItemLostImpl
 * @see ItemLost
 * @see ItemLostModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ItemLostModelImpl extends BaseModelImpl<ItemLost>
	implements ItemLostModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a item lost model instance should use the {@link ItemLost} interface instead.
	 */
	public static final String TABLE_NAME = "LofService_ItemLost";
	public static final Object[][] TABLE_COLUMNS = {
			{ "itemLostId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "LostDate", Types.TIMESTAMP },
			{ "LostLocation", Types.VARCHAR },
			{ "LostCompany", Types.VARCHAR },
			{ "LostColor", Types.VARCHAR },
			{ "LostSize", Types.VARCHAR },
			{ "LostType", Types.VARCHAR },
			{ "LostStatus", Types.VARCHAR },
			{ "LostDesc", Types.VARCHAR },
			{ "mimeType", Types.VARCHAR },
			{ "blobData", Types.BLOB }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("itemLostId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("LostDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("LostLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LostCompany", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LostColor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LostSize", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LostType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LostStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LostDesc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mimeType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("blobData", Types.BLOB);
	}

	public static final String TABLE_SQL_CREATE = "create table LofService_ItemLost (itemLostId LONG not null primary key,userId LONG,LostDate DATE null,LostLocation VARCHAR(75) null,LostCompany VARCHAR(75) null,LostColor VARCHAR(75) null,LostSize VARCHAR(75) null,LostType VARCHAR(75) null,LostStatus VARCHAR(75) null,LostDesc VARCHAR(500) null,mimeType VARCHAR(75) null,blobData BLOB)";
	public static final String TABLE_SQL_DROP = "drop table LofService_ItemLost";
	public static final String ORDER_BY_JPQL = " ORDER BY itemLost.itemLostId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LofService_ItemLost.itemLostId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.Trylof.services.model.ItemLost"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.Trylof.services.model.ItemLost"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.Trylof.services.model.ItemLost"),
			true);
	public static final long LOSTSTATUS_COLUMN_BITMASK = 1L;
	public static final long ITEMLOSTID_COLUMN_BITMASK = 2L;
	public static final long USERID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ItemLost toModel(ItemLostSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ItemLost model = new ItemLostImpl();

		model.setItemLostId(soapModel.getItemLostId());
		model.setUserId(soapModel.getUserId());
		model.setLostDate(soapModel.getLostDate());
		model.setLostLocation(soapModel.getLostLocation());
		model.setLostCompany(soapModel.getLostCompany());
		model.setLostColor(soapModel.getLostColor());
		model.setLostSize(soapModel.getLostSize());
		model.setLostType(soapModel.getLostType());
		model.setLostStatus(soapModel.getLostStatus());
		model.setLostDesc(soapModel.getLostDesc());
		model.setMimeType(soapModel.getMimeType());
		model.setBlobData(soapModel.getBlobData());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ItemLost> toModels(ItemLostSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ItemLost> models = new ArrayList<ItemLost>(soapModels.length);

		for (ItemLostSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.Trylof.services.model.ItemLost"));

	public ItemLostModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _itemLostId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setItemLostId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _itemLostId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ItemLost.class;
	}

	@Override
	public String getModelClassName() {
		return ItemLost.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("itemLostId", getItemLostId());
		attributes.put("userId", getUserId());
		attributes.put("LostDate", getLostDate());
		attributes.put("LostLocation", getLostLocation());
		attributes.put("LostCompany", getLostCompany());
		attributes.put("LostColor", getLostColor());
		attributes.put("LostSize", getLostSize());
		attributes.put("LostType", getLostType());
		attributes.put("LostStatus", getLostStatus());
		attributes.put("LostDesc", getLostDesc());
		attributes.put("mimeType", getMimeType());
		attributes.put("blobData", getBlobData());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long itemLostId = (Long)attributes.get("itemLostId");

		if (itemLostId != null) {
			setItemLostId(itemLostId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date LostDate = (Date)attributes.get("LostDate");

		if (LostDate != null) {
			setLostDate(LostDate);
		}

		String LostLocation = (String)attributes.get("LostLocation");

		if (LostLocation != null) {
			setLostLocation(LostLocation);
		}

		String LostCompany = (String)attributes.get("LostCompany");

		if (LostCompany != null) {
			setLostCompany(LostCompany);
		}

		String LostColor = (String)attributes.get("LostColor");

		if (LostColor != null) {
			setLostColor(LostColor);
		}

		String LostSize = (String)attributes.get("LostSize");

		if (LostSize != null) {
			setLostSize(LostSize);
		}

		String LostType = (String)attributes.get("LostType");

		if (LostType != null) {
			setLostType(LostType);
		}

		String LostStatus = (String)attributes.get("LostStatus");

		if (LostStatus != null) {
			setLostStatus(LostStatus);
		}

		String LostDesc = (String)attributes.get("LostDesc");

		if (LostDesc != null) {
			setLostDesc(LostDesc);
		}

		String mimeType = (String)attributes.get("mimeType");

		if (mimeType != null) {
			setMimeType(mimeType);
		}

		Blob blobData = (Blob)attributes.get("blobData");

		if (blobData != null) {
			setBlobData(blobData);
		}
	}

	@JSON
	@Override
	public long getItemLostId() {
		return _itemLostId;
	}

	@Override
	public void setItemLostId(long itemLostId) {
		_columnBitmask |= ITEMLOSTID_COLUMN_BITMASK;

		if (!_setOriginalItemLostId) {
			_setOriginalItemLostId = true;

			_originalItemLostId = _itemLostId;
		}

		_itemLostId = itemLostId;
	}

	public long getOriginalItemLostId() {
		return _originalItemLostId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public Date getLostDate() {
		return _LostDate;
	}

	@Override
	public void setLostDate(Date LostDate) {
		_LostDate = LostDate;
	}

	@JSON
	@Override
	public String getLostLocation() {
		if (_LostLocation == null) {
			return StringPool.BLANK;
		}
		else {
			return _LostLocation;
		}
	}

	@Override
	public void setLostLocation(String LostLocation) {
		_LostLocation = LostLocation;
	}

	@JSON
	@Override
	public String getLostCompany() {
		if (_LostCompany == null) {
			return StringPool.BLANK;
		}
		else {
			return _LostCompany;
		}
	}

	@Override
	public void setLostCompany(String LostCompany) {
		_LostCompany = LostCompany;
	}

	@JSON
	@Override
	public String getLostColor() {
		if (_LostColor == null) {
			return StringPool.BLANK;
		}
		else {
			return _LostColor;
		}
	}

	@Override
	public void setLostColor(String LostColor) {
		_LostColor = LostColor;
	}

	@JSON
	@Override
	public String getLostSize() {
		if (_LostSize == null) {
			return StringPool.BLANK;
		}
		else {
			return _LostSize;
		}
	}

	@Override
	public void setLostSize(String LostSize) {
		_LostSize = LostSize;
	}

	@JSON
	@Override
	public String getLostType() {
		if (_LostType == null) {
			return StringPool.BLANK;
		}
		else {
			return _LostType;
		}
	}

	@Override
	public void setLostType(String LostType) {
		_LostType = LostType;
	}

	@JSON
	@Override
	public String getLostStatus() {
		if (_LostStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _LostStatus;
		}
	}

	@Override
	public void setLostStatus(String LostStatus) {
		_columnBitmask |= LOSTSTATUS_COLUMN_BITMASK;

		if (_originalLostStatus == null) {
			_originalLostStatus = _LostStatus;
		}

		_LostStatus = LostStatus;
	}

	public String getOriginalLostStatus() {
		return GetterUtil.getString(_originalLostStatus);
	}

	@JSON
	@Override
	public String getLostDesc() {
		if (_LostDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _LostDesc;
		}
	}

	@Override
	public void setLostDesc(String LostDesc) {
		_LostDesc = LostDesc;
	}

	@JSON
	@Override
	public String getMimeType() {
		if (_mimeType == null) {
			return StringPool.BLANK;
		}
		else {
			return _mimeType;
		}
	}

	@Override
	public void setMimeType(String mimeType) {
		_mimeType = mimeType;
	}

	@JSON
	@Override
	public Blob getBlobData() {
		if (_blobDataBlobModel == null) {
			try {
				_blobDataBlobModel = ItemLostLocalServiceUtil.getBlobDataBlobModel(getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_blobDataBlobModel != null) {
			blob = _blobDataBlobModel.getBlobDataBlob();
		}

		return blob;
	}

	@Override
	public void setBlobData(Blob blobData) {
		if (_blobDataBlobModel == null) {
			_blobDataBlobModel = new ItemLostBlobDataBlobModel(getPrimaryKey(),
					blobData);
		}
		else {
			_blobDataBlobModel.setBlobDataBlob(blobData);
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ItemLost.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ItemLost toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ItemLost)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ItemLostImpl itemLostImpl = new ItemLostImpl();

		itemLostImpl.setItemLostId(getItemLostId());
		itemLostImpl.setUserId(getUserId());
		itemLostImpl.setLostDate(getLostDate());
		itemLostImpl.setLostLocation(getLostLocation());
		itemLostImpl.setLostCompany(getLostCompany());
		itemLostImpl.setLostColor(getLostColor());
		itemLostImpl.setLostSize(getLostSize());
		itemLostImpl.setLostType(getLostType());
		itemLostImpl.setLostStatus(getLostStatus());
		itemLostImpl.setLostDesc(getLostDesc());
		itemLostImpl.setMimeType(getMimeType());

		itemLostImpl.resetOriginalValues();

		return itemLostImpl;
	}

	@Override
	public int compareTo(ItemLost itemLost) {
		long primaryKey = itemLost.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ItemLost)) {
			return false;
		}

		ItemLost itemLost = (ItemLost)obj;

		long primaryKey = itemLost.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ItemLostModelImpl itemLostModelImpl = this;

		itemLostModelImpl._originalItemLostId = itemLostModelImpl._itemLostId;

		itemLostModelImpl._setOriginalItemLostId = false;

		itemLostModelImpl._originalUserId = itemLostModelImpl._userId;

		itemLostModelImpl._setOriginalUserId = false;

		itemLostModelImpl._originalLostStatus = itemLostModelImpl._LostStatus;

		itemLostModelImpl._blobDataBlobModel = null;

		itemLostModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ItemLost> toCacheModel() {
		ItemLostCacheModel itemLostCacheModel = new ItemLostCacheModel();

		itemLostCacheModel.itemLostId = getItemLostId();

		itemLostCacheModel.userId = getUserId();

		Date LostDate = getLostDate();

		if (LostDate != null) {
			itemLostCacheModel.LostDate = LostDate.getTime();
		}
		else {
			itemLostCacheModel.LostDate = Long.MIN_VALUE;
		}

		itemLostCacheModel.LostLocation = getLostLocation();

		String LostLocation = itemLostCacheModel.LostLocation;

		if ((LostLocation != null) && (LostLocation.length() == 0)) {
			itemLostCacheModel.LostLocation = null;
		}

		itemLostCacheModel.LostCompany = getLostCompany();

		String LostCompany = itemLostCacheModel.LostCompany;

		if ((LostCompany != null) && (LostCompany.length() == 0)) {
			itemLostCacheModel.LostCompany = null;
		}

		itemLostCacheModel.LostColor = getLostColor();

		String LostColor = itemLostCacheModel.LostColor;

		if ((LostColor != null) && (LostColor.length() == 0)) {
			itemLostCacheModel.LostColor = null;
		}

		itemLostCacheModel.LostSize = getLostSize();

		String LostSize = itemLostCacheModel.LostSize;

		if ((LostSize != null) && (LostSize.length() == 0)) {
			itemLostCacheModel.LostSize = null;
		}

		itemLostCacheModel.LostType = getLostType();

		String LostType = itemLostCacheModel.LostType;

		if ((LostType != null) && (LostType.length() == 0)) {
			itemLostCacheModel.LostType = null;
		}

		itemLostCacheModel.LostStatus = getLostStatus();

		String LostStatus = itemLostCacheModel.LostStatus;

		if ((LostStatus != null) && (LostStatus.length() == 0)) {
			itemLostCacheModel.LostStatus = null;
		}

		itemLostCacheModel.LostDesc = getLostDesc();

		String LostDesc = itemLostCacheModel.LostDesc;

		if ((LostDesc != null) && (LostDesc.length() == 0)) {
			itemLostCacheModel.LostDesc = null;
		}

		itemLostCacheModel.mimeType = getMimeType();

		String mimeType = itemLostCacheModel.mimeType;

		if ((mimeType != null) && (mimeType.length() == 0)) {
			itemLostCacheModel.mimeType = null;
		}

		return itemLostCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{itemLostId=");
		sb.append(getItemLostId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", LostDate=");
		sb.append(getLostDate());
		sb.append(", LostLocation=");
		sb.append(getLostLocation());
		sb.append(", LostCompany=");
		sb.append(getLostCompany());
		sb.append(", LostColor=");
		sb.append(getLostColor());
		sb.append(", LostSize=");
		sb.append(getLostSize());
		sb.append(", LostType=");
		sb.append(getLostType());
		sb.append(", LostStatus=");
		sb.append(getLostStatus());
		sb.append(", LostDesc=");
		sb.append(getLostDesc());
		sb.append(", mimeType=");
		sb.append(getMimeType());

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.Trylof.services.model.ItemLost");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>itemLostId</column-name><column-value><![CDATA[");
		sb.append(getItemLostId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>LostDate</column-name><column-value><![CDATA[");
		sb.append(getLostDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>LostLocation</column-name><column-value><![CDATA[");
		sb.append(getLostLocation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>LostCompany</column-name><column-value><![CDATA[");
		sb.append(getLostCompany());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>LostColor</column-name><column-value><![CDATA[");
		sb.append(getLostColor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>LostSize</column-name><column-value><![CDATA[");
		sb.append(getLostSize());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>LostType</column-name><column-value><![CDATA[");
		sb.append(getLostType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>LostStatus</column-name><column-value><![CDATA[");
		sb.append(getLostStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>LostDesc</column-name><column-value><![CDATA[");
		sb.append(getLostDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mimeType</column-name><column-value><![CDATA[");
		sb.append(getMimeType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ItemLost.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ItemLost.class
		};
	private long _itemLostId;
	private long _originalItemLostId;
	private boolean _setOriginalItemLostId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private Date _LostDate;
	private String _LostLocation;
	private String _LostCompany;
	private String _LostColor;
	private String _LostSize;
	private String _LostType;
	private String _LostStatus;
	private String _originalLostStatus;
	private String _LostDesc;
	private String _mimeType;
	private ItemLostBlobDataBlobModel _blobDataBlobModel;
	private long _columnBitmask;
	private ItemLost _escapedModel;
}
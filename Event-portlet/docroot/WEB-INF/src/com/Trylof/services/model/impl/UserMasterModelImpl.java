/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.Trylof.services.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.Trylof.services.model.UserMaster;
import com.Trylof.services.model.UserMasterModel;
import com.Trylof.services.model.UserMasterSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the UserMaster service. Represents a row in the &quot;LofService_UserMaster&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link UserMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserMasterImpl}.
 * </p>
 *
 * @author Utkarsh
 * @see UserMasterImpl
 * @see UserMaster
 * @see UserMasterModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class UserMasterModelImpl extends BaseModelImpl<UserMaster>
	implements UserMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user master model instance should use the {@link UserMaster} interface instead.
	 */
	public static final String TABLE_NAME = "LofService_UserMaster";
	public static final Object[][] TABLE_COLUMNS = {
			{ "userMasterId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "userEmail", Types.VARCHAR },
			{ "userPass", Types.VARCHAR },
			{ "userAddress", Types.VARCHAR },
			{ "userPhoneno", Types.INTEGER },
			{ "userType", Types.VARCHAR },
			{ "userOrganization", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("userMasterId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userPass", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userPhoneno", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("userType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userOrganization", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table LofService_UserMaster (userMasterId LONG not null primary key,userName VARCHAR(75) null,userEmail VARCHAR(75) null,userPass VARCHAR(75) null,userAddress VARCHAR(75) null,userPhoneno INTEGER,userType VARCHAR(75) null,userOrganization VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table LofService_UserMaster";
	public static final String ORDER_BY_JPQL = " ORDER BY userMaster.userMasterId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LofService_UserMaster.userMasterId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.Trylof.services.model.UserMaster"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.Trylof.services.model.UserMaster"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.Trylof.services.model.UserMaster"),
			true);
	public static final long USEREMAIL_COLUMN_BITMASK = 1L;
	public static final long USERPASS_COLUMN_BITMASK = 2L;
	public static final long USERMASTERID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static UserMaster toModel(UserMasterSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		UserMaster model = new UserMasterImpl();

		model.setUserMasterId(soapModel.getUserMasterId());
		model.setUserName(soapModel.getUserName());
		model.setUserEmail(soapModel.getUserEmail());
		model.setUserPass(soapModel.getUserPass());
		model.setUserAddress(soapModel.getUserAddress());
		model.setUserPhoneno(soapModel.getUserPhoneno());
		model.setUserType(soapModel.getUserType());
		model.setUserOrganization(soapModel.getUserOrganization());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<UserMaster> toModels(UserMasterSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<UserMaster> models = new ArrayList<UserMaster>(soapModels.length);

		for (UserMasterSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.Trylof.services.model.UserMaster"));

	public UserMasterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userMasterId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserMasterId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userMasterId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserMaster.class;
	}

	@Override
	public String getModelClassName() {
		return UserMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("userMasterId", getUserMasterId());
		attributes.put("userName", getUserName());
		attributes.put("userEmail", getUserEmail());
		attributes.put("userPass", getUserPass());
		attributes.put("userAddress", getUserAddress());
		attributes.put("userPhoneno", getUserPhoneno());
		attributes.put("userType", getUserType());
		attributes.put("userOrganization", getUserOrganization());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long userMasterId = (Long)attributes.get("userMasterId");

		if (userMasterId != null) {
			setUserMasterId(userMasterId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		String userEmail = (String)attributes.get("userEmail");

		if (userEmail != null) {
			setUserEmail(userEmail);
		}

		String userPass = (String)attributes.get("userPass");

		if (userPass != null) {
			setUserPass(userPass);
		}

		String userAddress = (String)attributes.get("userAddress");

		if (userAddress != null) {
			setUserAddress(userAddress);
		}

		Integer userPhoneno = (Integer)attributes.get("userPhoneno");

		if (userPhoneno != null) {
			setUserPhoneno(userPhoneno);
		}

		String userType = (String)attributes.get("userType");

		if (userType != null) {
			setUserType(userType);
		}

		String userOrganization = (String)attributes.get("userOrganization");

		if (userOrganization != null) {
			setUserOrganization(userOrganization);
		}
	}

	@JSON
	@Override
	public long getUserMasterId() {
		return _userMasterId;
	}

	@Override
	public void setUserMasterId(long userMasterId) {
		_userMasterId = userMasterId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public String getUserEmail() {
		if (_userEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _userEmail;
		}
	}

	@Override
	public void setUserEmail(String userEmail) {
		_columnBitmask |= USEREMAIL_COLUMN_BITMASK;

		if (_originalUserEmail == null) {
			_originalUserEmail = _userEmail;
		}

		_userEmail = userEmail;
	}

	public String getOriginalUserEmail() {
		return GetterUtil.getString(_originalUserEmail);
	}

	@JSON
	@Override
	public String getUserPass() {
		if (_userPass == null) {
			return StringPool.BLANK;
		}
		else {
			return _userPass;
		}
	}

	@Override
	public void setUserPass(String userPass) {
		_columnBitmask |= USERPASS_COLUMN_BITMASK;

		if (_originalUserPass == null) {
			_originalUserPass = _userPass;
		}

		_userPass = userPass;
	}

	public String getOriginalUserPass() {
		return GetterUtil.getString(_originalUserPass);
	}

	@JSON
	@Override
	public String getUserAddress() {
		if (_userAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _userAddress;
		}
	}

	@Override
	public void setUserAddress(String userAddress) {
		_userAddress = userAddress;
	}

	@JSON
	@Override
	public int getUserPhoneno() {
		return _userPhoneno;
	}

	@Override
	public void setUserPhoneno(int userPhoneno) {
		_userPhoneno = userPhoneno;
	}

	@JSON
	@Override
	public String getUserType() {
		if (_userType == null) {
			return StringPool.BLANK;
		}
		else {
			return _userType;
		}
	}

	@Override
	public void setUserType(String userType) {
		_userType = userType;
	}

	@JSON
	@Override
	public String getUserOrganization() {
		if (_userOrganization == null) {
			return StringPool.BLANK;
		}
		else {
			return _userOrganization;
		}
	}

	@Override
	public void setUserOrganization(String userOrganization) {
		_userOrganization = userOrganization;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			UserMaster.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UserMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserMasterImpl userMasterImpl = new UserMasterImpl();

		userMasterImpl.setUserMasterId(getUserMasterId());
		userMasterImpl.setUserName(getUserName());
		userMasterImpl.setUserEmail(getUserEmail());
		userMasterImpl.setUserPass(getUserPass());
		userMasterImpl.setUserAddress(getUserAddress());
		userMasterImpl.setUserPhoneno(getUserPhoneno());
		userMasterImpl.setUserType(getUserType());
		userMasterImpl.setUserOrganization(getUserOrganization());

		userMasterImpl.resetOriginalValues();

		return userMasterImpl;
	}

	@Override
	public int compareTo(UserMaster userMaster) {
		long primaryKey = userMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserMaster)) {
			return false;
		}

		UserMaster userMaster = (UserMaster)obj;

		long primaryKey = userMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		UserMasterModelImpl userMasterModelImpl = this;

		userMasterModelImpl._originalUserEmail = userMasterModelImpl._userEmail;

		userMasterModelImpl._originalUserPass = userMasterModelImpl._userPass;

		userMasterModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserMaster> toCacheModel() {
		UserMasterCacheModel userMasterCacheModel = new UserMasterCacheModel();

		userMasterCacheModel.userMasterId = getUserMasterId();

		userMasterCacheModel.userName = getUserName();

		String userName = userMasterCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			userMasterCacheModel.userName = null;
		}

		userMasterCacheModel.userEmail = getUserEmail();

		String userEmail = userMasterCacheModel.userEmail;

		if ((userEmail != null) && (userEmail.length() == 0)) {
			userMasterCacheModel.userEmail = null;
		}

		userMasterCacheModel.userPass = getUserPass();

		String userPass = userMasterCacheModel.userPass;

		if ((userPass != null) && (userPass.length() == 0)) {
			userMasterCacheModel.userPass = null;
		}

		userMasterCacheModel.userAddress = getUserAddress();

		String userAddress = userMasterCacheModel.userAddress;

		if ((userAddress != null) && (userAddress.length() == 0)) {
			userMasterCacheModel.userAddress = null;
		}

		userMasterCacheModel.userPhoneno = getUserPhoneno();

		userMasterCacheModel.userType = getUserType();

		String userType = userMasterCacheModel.userType;

		if ((userType != null) && (userType.length() == 0)) {
			userMasterCacheModel.userType = null;
		}

		userMasterCacheModel.userOrganization = getUserOrganization();

		String userOrganization = userMasterCacheModel.userOrganization;

		if ((userOrganization != null) && (userOrganization.length() == 0)) {
			userMasterCacheModel.userOrganization = null;
		}

		return userMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{userMasterId=");
		sb.append(getUserMasterId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", userEmail=");
		sb.append(getUserEmail());
		sb.append(", userPass=");
		sb.append(getUserPass());
		sb.append(", userAddress=");
		sb.append(getUserAddress());
		sb.append(", userPhoneno=");
		sb.append(getUserPhoneno());
		sb.append(", userType=");
		sb.append(getUserType());
		sb.append(", userOrganization=");
		sb.append(getUserOrganization());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.Trylof.services.model.UserMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userMasterId</column-name><column-value><![CDATA[");
		sb.append(getUserMasterId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userEmail</column-name><column-value><![CDATA[");
		sb.append(getUserEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userPass</column-name><column-value><![CDATA[");
		sb.append(getUserPass());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userAddress</column-name><column-value><![CDATA[");
		sb.append(getUserAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userPhoneno</column-name><column-value><![CDATA[");
		sb.append(getUserPhoneno());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userType</column-name><column-value><![CDATA[");
		sb.append(getUserType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userOrganization</column-name><column-value><![CDATA[");
		sb.append(getUserOrganization());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = UserMaster.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			UserMaster.class
		};
	private long _userMasterId;
	private String _userName;
	private String _userEmail;
	private String _originalUserEmail;
	private String _userPass;
	private String _originalUserPass;
	private String _userAddress;
	private int _userPhoneno;
	private String _userType;
	private String _userOrganization;
	private long _columnBitmask;
	private UserMaster _escapedModel;
}
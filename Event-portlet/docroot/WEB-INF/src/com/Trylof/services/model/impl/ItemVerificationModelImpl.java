/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.Trylof.services.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.Trylof.services.model.ItemVerification;
import com.Trylof.services.model.ItemVerificationImage1BlobModel;
import com.Trylof.services.model.ItemVerificationImage2BlobModel;
import com.Trylof.services.model.ItemVerificationModel;
import com.Trylof.services.model.ItemVerificationSoap;
import com.Trylof.services.service.ItemVerificationLocalServiceUtil;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ItemVerification service. Represents a row in the &quot;LofService_ItemVerification&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ItemVerificationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ItemVerificationImpl}.
 * </p>
 *
 * @author Utkarsh
 * @see ItemVerificationImpl
 * @see ItemVerification
 * @see ItemVerificationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ItemVerificationModelImpl extends BaseModelImpl<ItemVerification>
	implements ItemVerificationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a item verification model instance should use the {@link ItemVerification} interface instead.
	 */
	public static final String TABLE_NAME = "LofService_ItemVerification";
	public static final Object[][] TABLE_COLUMNS = {
			{ "itemVerificationId", Types.BIGINT },
			{ "VerifyDesc", Types.VARCHAR },
			{ "Image1", Types.BLOB },
			{ "Image2", Types.BLOB },
			{ "LostItemid", Types.BIGINT },
			{ "FoundItemid", Types.BIGINT },
			{ "UserId", Types.BIGINT },
			{ "VerifyStatus", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("itemVerificationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("VerifyDesc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Image1", Types.BLOB);
		TABLE_COLUMNS_MAP.put("Image2", Types.BLOB);
		TABLE_COLUMNS_MAP.put("LostItemid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("FoundItemid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("UserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("VerifyStatus", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table LofService_ItemVerification (itemVerificationId LONG not null primary key,VerifyDesc VARCHAR(500) null,Image1 BLOB,Image2 BLOB,LostItemid LONG,FoundItemid LONG,UserId LONG,VerifyStatus VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table LofService_ItemVerification";
	public static final String ORDER_BY_JPQL = " ORDER BY itemVerification.itemVerificationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LofService_ItemVerification.itemVerificationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.Trylof.services.model.ItemVerification"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.Trylof.services.model.ItemVerification"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.Trylof.services.model.ItemVerification"),
			true);
	public static final long LOSTITEMID_COLUMN_BITMASK = 1L;
	public static final long USERID_COLUMN_BITMASK = 2L;
	public static final long VERIFYSTATUS_COLUMN_BITMASK = 4L;
	public static final long ITEMVERIFICATIONID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ItemVerification toModel(ItemVerificationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ItemVerification model = new ItemVerificationImpl();

		model.setItemVerificationId(soapModel.getItemVerificationId());
		model.setVerifyDesc(soapModel.getVerifyDesc());
		model.setImage1(soapModel.getImage1());
		model.setImage2(soapModel.getImage2());
		model.setLostItemid(soapModel.getLostItemid());
		model.setFoundItemid(soapModel.getFoundItemid());
		model.setUserId(soapModel.getUserId());
		model.setVerifyStatus(soapModel.getVerifyStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ItemVerification> toModels(
		ItemVerificationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ItemVerification> models = new ArrayList<ItemVerification>(soapModels.length);

		for (ItemVerificationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.Trylof.services.model.ItemVerification"));

	public ItemVerificationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _itemVerificationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setItemVerificationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _itemVerificationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ItemVerification.class;
	}

	@Override
	public String getModelClassName() {
		return ItemVerification.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("itemVerificationId", getItemVerificationId());
		attributes.put("VerifyDesc", getVerifyDesc());
		attributes.put("Image1", getImage1());
		attributes.put("Image2", getImage2());
		attributes.put("LostItemid", getLostItemid());
		attributes.put("FoundItemid", getFoundItemid());
		attributes.put("UserId", getUserId());
		attributes.put("VerifyStatus", getVerifyStatus());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long itemVerificationId = (Long)attributes.get("itemVerificationId");

		if (itemVerificationId != null) {
			setItemVerificationId(itemVerificationId);
		}

		String VerifyDesc = (String)attributes.get("VerifyDesc");

		if (VerifyDesc != null) {
			setVerifyDesc(VerifyDesc);
		}

		Blob Image1 = (Blob)attributes.get("Image1");

		if (Image1 != null) {
			setImage1(Image1);
		}

		Blob Image2 = (Blob)attributes.get("Image2");

		if (Image2 != null) {
			setImage2(Image2);
		}

		Long LostItemid = (Long)attributes.get("LostItemid");

		if (LostItemid != null) {
			setLostItemid(LostItemid);
		}

		Long FoundItemid = (Long)attributes.get("FoundItemid");

		if (FoundItemid != null) {
			setFoundItemid(FoundItemid);
		}

		Long UserId = (Long)attributes.get("UserId");

		if (UserId != null) {
			setUserId(UserId);
		}

		String VerifyStatus = (String)attributes.get("VerifyStatus");

		if (VerifyStatus != null) {
			setVerifyStatus(VerifyStatus);
		}
	}

	@JSON
	@Override
	public long getItemVerificationId() {
		return _itemVerificationId;
	}

	@Override
	public void setItemVerificationId(long itemVerificationId) {
		_itemVerificationId = itemVerificationId;
	}

	@JSON
	@Override
	public String getVerifyDesc() {
		if (_VerifyDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _VerifyDesc;
		}
	}

	@Override
	public void setVerifyDesc(String VerifyDesc) {
		_VerifyDesc = VerifyDesc;
	}

	@JSON
	@Override
	public Blob getImage1() {
		if (_Image1BlobModel == null) {
			try {
				_Image1BlobModel = ItemVerificationLocalServiceUtil.getImage1BlobModel(getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_Image1BlobModel != null) {
			blob = _Image1BlobModel.getImage1Blob();
		}

		return blob;
	}

	@Override
	public void setImage1(Blob Image1) {
		if (_Image1BlobModel == null) {
			_Image1BlobModel = new ItemVerificationImage1BlobModel(getPrimaryKey(),
					Image1);
		}
		else {
			_Image1BlobModel.setImage1Blob(Image1);
		}
	}

	@JSON
	@Override
	public Blob getImage2() {
		if (_Image2BlobModel == null) {
			try {
				_Image2BlobModel = ItemVerificationLocalServiceUtil.getImage2BlobModel(getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_Image2BlobModel != null) {
			blob = _Image2BlobModel.getImage2Blob();
		}

		return blob;
	}

	@Override
	public void setImage2(Blob Image2) {
		if (_Image2BlobModel == null) {
			_Image2BlobModel = new ItemVerificationImage2BlobModel(getPrimaryKey(),
					Image2);
		}
		else {
			_Image2BlobModel.setImage2Blob(Image2);
		}
	}

	@JSON
	@Override
	public long getLostItemid() {
		return _LostItemid;
	}

	@Override
	public void setLostItemid(long LostItemid) {
		_columnBitmask |= LOSTITEMID_COLUMN_BITMASK;

		if (!_setOriginalLostItemid) {
			_setOriginalLostItemid = true;

			_originalLostItemid = _LostItemid;
		}

		_LostItemid = LostItemid;
	}

	public long getOriginalLostItemid() {
		return _originalLostItemid;
	}

	@JSON
	@Override
	public long getFoundItemid() {
		return _FoundItemid;
	}

	@Override
	public void setFoundItemid(long FoundItemid) {
		_FoundItemid = FoundItemid;
	}

	@JSON
	@Override
	public long getUserId() {
		return _UserId;
	}

	@Override
	public void setUserId(long UserId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _UserId;
		}

		_UserId = UserId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String UserUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getVerifyStatus() {
		if (_VerifyStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _VerifyStatus;
		}
	}

	@Override
	public void setVerifyStatus(String VerifyStatus) {
		_columnBitmask |= VERIFYSTATUS_COLUMN_BITMASK;

		if (_originalVerifyStatus == null) {
			_originalVerifyStatus = _VerifyStatus;
		}

		_VerifyStatus = VerifyStatus;
	}

	public String getOriginalVerifyStatus() {
		return GetterUtil.getString(_originalVerifyStatus);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ItemVerification.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ItemVerification toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ItemVerification)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ItemVerificationImpl itemVerificationImpl = new ItemVerificationImpl();

		itemVerificationImpl.setItemVerificationId(getItemVerificationId());
		itemVerificationImpl.setVerifyDesc(getVerifyDesc());
		itemVerificationImpl.setLostItemid(getLostItemid());
		itemVerificationImpl.setFoundItemid(getFoundItemid());
		itemVerificationImpl.setUserId(getUserId());
		itemVerificationImpl.setVerifyStatus(getVerifyStatus());

		itemVerificationImpl.resetOriginalValues();

		return itemVerificationImpl;
	}

	@Override
	public int compareTo(ItemVerification itemVerification) {
		long primaryKey = itemVerification.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ItemVerification)) {
			return false;
		}

		ItemVerification itemVerification = (ItemVerification)obj;

		long primaryKey = itemVerification.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ItemVerificationModelImpl itemVerificationModelImpl = this;

		itemVerificationModelImpl._Image1BlobModel = null;

		itemVerificationModelImpl._Image2BlobModel = null;

		itemVerificationModelImpl._originalLostItemid = itemVerificationModelImpl._LostItemid;

		itemVerificationModelImpl._setOriginalLostItemid = false;

		itemVerificationModelImpl._originalUserId = itemVerificationModelImpl._UserId;

		itemVerificationModelImpl._setOriginalUserId = false;

		itemVerificationModelImpl._originalVerifyStatus = itemVerificationModelImpl._VerifyStatus;

		itemVerificationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ItemVerification> toCacheModel() {
		ItemVerificationCacheModel itemVerificationCacheModel = new ItemVerificationCacheModel();

		itemVerificationCacheModel.itemVerificationId = getItemVerificationId();

		itemVerificationCacheModel.VerifyDesc = getVerifyDesc();

		String VerifyDesc = itemVerificationCacheModel.VerifyDesc;

		if ((VerifyDesc != null) && (VerifyDesc.length() == 0)) {
			itemVerificationCacheModel.VerifyDesc = null;
		}

		itemVerificationCacheModel.LostItemid = getLostItemid();

		itemVerificationCacheModel.FoundItemid = getFoundItemid();

		itemVerificationCacheModel.UserId = getUserId();

		itemVerificationCacheModel.VerifyStatus = getVerifyStatus();

		String VerifyStatus = itemVerificationCacheModel.VerifyStatus;

		if ((VerifyStatus != null) && (VerifyStatus.length() == 0)) {
			itemVerificationCacheModel.VerifyStatus = null;
		}

		return itemVerificationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{itemVerificationId=");
		sb.append(getItemVerificationId());
		sb.append(", VerifyDesc=");
		sb.append(getVerifyDesc());
		sb.append(", LostItemid=");
		sb.append(getLostItemid());
		sb.append(", FoundItemid=");
		sb.append(getFoundItemid());
		sb.append(", UserId=");
		sb.append(getUserId());
		sb.append(", VerifyStatus=");
		sb.append(getVerifyStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.Trylof.services.model.ItemVerification");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>itemVerificationId</column-name><column-value><![CDATA[");
		sb.append(getItemVerificationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>VerifyDesc</column-name><column-value><![CDATA[");
		sb.append(getVerifyDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>LostItemid</column-name><column-value><![CDATA[");
		sb.append(getLostItemid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>FoundItemid</column-name><column-value><![CDATA[");
		sb.append(getFoundItemid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>UserId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>VerifyStatus</column-name><column-value><![CDATA[");
		sb.append(getVerifyStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ItemVerification.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ItemVerification.class
		};
	private long _itemVerificationId;
	private String _VerifyDesc;
	private ItemVerificationImage1BlobModel _Image1BlobModel;
	private ItemVerificationImage2BlobModel _Image2BlobModel;
	private long _LostItemid;
	private long _originalLostItemid;
	private boolean _setOriginalLostItemid;
	private long _FoundItemid;
	private long _UserId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _VerifyStatus;
	private String _originalVerifyStatus;
	private long _columnBitmask;
	private ItemVerification _escapedModel;
}
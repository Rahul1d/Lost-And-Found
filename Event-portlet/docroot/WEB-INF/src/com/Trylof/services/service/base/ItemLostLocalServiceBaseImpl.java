/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.Trylof.services.service.base;

import aQute.bnd.annotation.ProviderType;

import com.Trylof.services.model.ItemLost;
import com.Trylof.services.model.ItemLostBlobDataBlobModel;
import com.Trylof.services.service.ItemLostLocalService;
import com.Trylof.services.service.persistence.ItemFoundPersistence;
import com.Trylof.services.service.persistence.ItemLostPersistence;
import com.Trylof.services.service.persistence.ItemVerificationPersistence;
import com.Trylof.services.service.persistence.SearchResPersistence;
import com.Trylof.services.service.persistence.UserMasterPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.dao.orm.Session;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the item lost local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.Trylof.services.service.impl.ItemLostLocalServiceImpl}.
 * </p>
 *
 * @author Utkarsh
 * @see com.Trylof.services.service.impl.ItemLostLocalServiceImpl
 * @see com.Trylof.services.service.ItemLostLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class ItemLostLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements ItemLostLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.Trylof.services.service.ItemLostLocalServiceUtil} to access the item lost local service.
	 */

	/**
	 * Adds the item lost to the database. Also notifies the appropriate model listeners.
	 *
	 * @param itemLost the item lost
	 * @return the item lost that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ItemLost addItemLost(ItemLost itemLost) {
		itemLost.setNew(true);

		return itemLostPersistence.update(itemLost);
	}

	/**
	 * Creates a new item lost with the primary key. Does not add the item lost to the database.
	 *
	 * @param itemLostId the primary key for the new item lost
	 * @return the new item lost
	 */
	@Override
	public ItemLost createItemLost(long itemLostId) {
		return itemLostPersistence.create(itemLostId);
	}

	/**
	 * Deletes the item lost with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param itemLostId the primary key of the item lost
	 * @return the item lost that was removed
	 * @throws PortalException if a item lost with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ItemLost deleteItemLost(long itemLostId) throws PortalException {
		return itemLostPersistence.remove(itemLostId);
	}

	/**
	 * Deletes the item lost from the database. Also notifies the appropriate model listeners.
	 *
	 * @param itemLost the item lost
	 * @return the item lost that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ItemLost deleteItemLost(ItemLost itemLost) {
		return itemLostPersistence.remove(itemLost);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(ItemLost.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return itemLostPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.Trylof.services.model.impl.ItemLostModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return itemLostPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.Trylof.services.model.impl.ItemLostModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return itemLostPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return itemLostPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return itemLostPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public ItemLost fetchItemLost(long itemLostId) {
		return itemLostPersistence.fetchByPrimaryKey(itemLostId);
	}

	/**
	 * Returns the item lost with the primary key.
	 *
	 * @param itemLostId the primary key of the item lost
	 * @return the item lost
	 * @throws PortalException if a item lost with the primary key could not be found
	 */
	@Override
	public ItemLost getItemLost(long itemLostId) throws PortalException {
		return itemLostPersistence.findByPrimaryKey(itemLostId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(com.Trylof.services.service.ItemLostLocalServiceUtil.getService());
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ItemLost.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("itemLostId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(com.Trylof.services.service.ItemLostLocalServiceUtil.getService());
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(ItemLost.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("itemLostId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(com.Trylof.services.service.ItemLostLocalServiceUtil.getService());
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ItemLost.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("itemLostId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return itemLostLocalService.deleteItemLost((ItemLost)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return itemLostPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the item losts.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.Trylof.services.model.impl.ItemLostModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of item losts
	 * @param end the upper bound of the range of item losts (not inclusive)
	 * @return the range of item losts
	 */
	@Override
	public List<ItemLost> getItemLosts(int start, int end) {
		return itemLostPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of item losts.
	 *
	 * @return the number of item losts
	 */
	@Override
	public int getItemLostsCount() {
		return itemLostPersistence.countAll();
	}

	/**
	 * Updates the item lost in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param itemLost the item lost
	 * @return the item lost that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ItemLost updateItemLost(ItemLost itemLost) {
		return itemLostPersistence.update(itemLost);
	}

	@Override
	public ItemLostBlobDataBlobModel getBlobDataBlobModel(
		Serializable primaryKey) {
		Session session = null;

		try {
			session = itemLostPersistence.openSession();

			return (ItemLostBlobDataBlobModel)session.get(ItemLostBlobDataBlobModel.class,
				primaryKey);
		}
		catch (Exception e) {
			throw itemLostPersistence.processException(e);
		}
		finally {
			itemLostPersistence.closeSession(session);
		}
	}

	/**
	 * Returns the item found local service.
	 *
	 * @return the item found local service
	 */
	public com.Trylof.services.service.ItemFoundLocalService getItemFoundLocalService() {
		return itemFoundLocalService;
	}

	/**
	 * Sets the item found local service.
	 *
	 * @param itemFoundLocalService the item found local service
	 */
	public void setItemFoundLocalService(
		com.Trylof.services.service.ItemFoundLocalService itemFoundLocalService) {
		this.itemFoundLocalService = itemFoundLocalService;
	}

	/**
	 * Returns the item found persistence.
	 *
	 * @return the item found persistence
	 */
	public ItemFoundPersistence getItemFoundPersistence() {
		return itemFoundPersistence;
	}

	/**
	 * Sets the item found persistence.
	 *
	 * @param itemFoundPersistence the item found persistence
	 */
	public void setItemFoundPersistence(
		ItemFoundPersistence itemFoundPersistence) {
		this.itemFoundPersistence = itemFoundPersistence;
	}

	/**
	 * Returns the item lost local service.
	 *
	 * @return the item lost local service
	 */
	public ItemLostLocalService getItemLostLocalService() {
		return itemLostLocalService;
	}

	/**
	 * Sets the item lost local service.
	 *
	 * @param itemLostLocalService the item lost local service
	 */
	public void setItemLostLocalService(
		ItemLostLocalService itemLostLocalService) {
		this.itemLostLocalService = itemLostLocalService;
	}

	/**
	 * Returns the item lost persistence.
	 *
	 * @return the item lost persistence
	 */
	public ItemLostPersistence getItemLostPersistence() {
		return itemLostPersistence;
	}

	/**
	 * Sets the item lost persistence.
	 *
	 * @param itemLostPersistence the item lost persistence
	 */
	public void setItemLostPersistence(ItemLostPersistence itemLostPersistence) {
		this.itemLostPersistence = itemLostPersistence;
	}

	/**
	 * Returns the item verification local service.
	 *
	 * @return the item verification local service
	 */
	public com.Trylof.services.service.ItemVerificationLocalService getItemVerificationLocalService() {
		return itemVerificationLocalService;
	}

	/**
	 * Sets the item verification local service.
	 *
	 * @param itemVerificationLocalService the item verification local service
	 */
	public void setItemVerificationLocalService(
		com.Trylof.services.service.ItemVerificationLocalService itemVerificationLocalService) {
		this.itemVerificationLocalService = itemVerificationLocalService;
	}

	/**
	 * Returns the item verification persistence.
	 *
	 * @return the item verification persistence
	 */
	public ItemVerificationPersistence getItemVerificationPersistence() {
		return itemVerificationPersistence;
	}

	/**
	 * Sets the item verification persistence.
	 *
	 * @param itemVerificationPersistence the item verification persistence
	 */
	public void setItemVerificationPersistence(
		ItemVerificationPersistence itemVerificationPersistence) {
		this.itemVerificationPersistence = itemVerificationPersistence;
	}

	/**
	 * Returns the search res local service.
	 *
	 * @return the search res local service
	 */
	public com.Trylof.services.service.SearchResLocalService getSearchResLocalService() {
		return searchResLocalService;
	}

	/**
	 * Sets the search res local service.
	 *
	 * @param searchResLocalService the search res local service
	 */
	public void setSearchResLocalService(
		com.Trylof.services.service.SearchResLocalService searchResLocalService) {
		this.searchResLocalService = searchResLocalService;
	}

	/**
	 * Returns the search res persistence.
	 *
	 * @return the search res persistence
	 */
	public SearchResPersistence getSearchResPersistence() {
		return searchResPersistence;
	}

	/**
	 * Sets the search res persistence.
	 *
	 * @param searchResPersistence the search res persistence
	 */
	public void setSearchResPersistence(
		SearchResPersistence searchResPersistence) {
		this.searchResPersistence = searchResPersistence;
	}

	/**
	 * Returns the user master local service.
	 *
	 * @return the user master local service
	 */
	public com.Trylof.services.service.UserMasterLocalService getUserMasterLocalService() {
		return userMasterLocalService;
	}

	/**
	 * Sets the user master local service.
	 *
	 * @param userMasterLocalService the user master local service
	 */
	public void setUserMasterLocalService(
		com.Trylof.services.service.UserMasterLocalService userMasterLocalService) {
		this.userMasterLocalService = userMasterLocalService;
	}

	/**
	 * Returns the user master persistence.
	 *
	 * @return the user master persistence
	 */
	public UserMasterPersistence getUserMasterPersistence() {
		return userMasterPersistence;
	}

	/**
	 * Sets the user master persistence.
	 *
	 * @param userMasterPersistence the user master persistence
	 */
	public void setUserMasterPersistence(
		UserMasterPersistence userMasterPersistence) {
		this.userMasterPersistence = userMasterPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.Trylof.services.model.ItemLost",
			itemLostLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.Trylof.services.model.ItemLost");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return ItemLostLocalService.class.getName();
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return ItemLost.class;
	}

	protected String getModelClassName() {
		return ItemLost.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = itemLostPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.Trylof.services.service.ItemFoundLocalService.class)
	protected com.Trylof.services.service.ItemFoundLocalService itemFoundLocalService;
	@BeanReference(type = ItemFoundPersistence.class)
	protected ItemFoundPersistence itemFoundPersistence;
	@BeanReference(type = com.Trylof.services.service.ItemLostLocalService.class)
	protected ItemLostLocalService itemLostLocalService;
	@BeanReference(type = ItemLostPersistence.class)
	protected ItemLostPersistence itemLostPersistence;
	@BeanReference(type = com.Trylof.services.service.ItemVerificationLocalService.class)
	protected com.Trylof.services.service.ItemVerificationLocalService itemVerificationLocalService;
	@BeanReference(type = ItemVerificationPersistence.class)
	protected ItemVerificationPersistence itemVerificationPersistence;
	@BeanReference(type = com.Trylof.services.service.SearchResLocalService.class)
	protected com.Trylof.services.service.SearchResLocalService searchResLocalService;
	@BeanReference(type = SearchResPersistence.class)
	protected SearchResPersistence searchResPersistence;
	@BeanReference(type = com.Trylof.services.service.UserMasterLocalService.class)
	protected com.Trylof.services.service.UserMasterLocalService userMasterLocalService;
	@BeanReference(type = UserMasterPersistence.class)
	protected UserMasterPersistence userMasterPersistence;
	@BeanReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@BeanReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@BeanReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private ClassLoader _classLoader;
	private ItemLostLocalServiceClpInvoker _clpInvoker = new ItemLostLocalServiceClpInvoker();
}